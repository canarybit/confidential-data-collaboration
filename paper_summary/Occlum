#################### OCCLUM : SECURE AND EFFICIENT MULTITASKING INSIDE A SINGLE ENCLAVE OF INTEL SGX #################

Occlum is a system that uses Software Fault Isolation (SFI) - Isolated Processes based to enable a secure and efficient
multitasking on SGX. Occlum comes as an idea to solve the high cost of enclave creation in the previous technology such
Graphene-SGX that uses Enclave Isolated Process (EIP) to launch one process in one enclave. With modified SFI, namely
MPX-based, Multi-Domain SFI (MMDSFI) that makes it possible for Occlum to enable intra-enclave isolation mechanisms for
SIPs, including inter-process isolation and process-LibOS isolation. In another words, by creating several domains in one 
enclave, multitasking on SGX is possible to achieve. MMDSFI also prevents all memory attacks that may break the isolation 
of SIPs. An Occlum architecture consists of an enclave that is segmented into several processes and LibOS to provide an
interexchange-communication between one SIP to another SIPs. Similar to SGX and other library OSes, Occlum does not consider
denial-of-service attacks, side-channel attacks and covert-channel attacks.

Occlum uses spawn for processes creation instead of fork that is generally used in other EIPs library OSes. Since data in
one SIP is not encrypted when it is transfered to another SIPs, but it is simply copied from one to another, that makes SIP
is much cheaper compared to EIP. To achieve such goal, two security policies must be enforced : 1) the memory access policy
and 2) the control transfer policy. Occlum uses cfi_label that is attached to the last 4 bytes of each process address in
order to differentiate one process and the others. To ensure the trustworthiness of Occlum's security properties based on
MMDSFI, Occlum verifier is introduced. The verifier consists of four stages : 1) complete disassembly, 2) instruction section
verification, 3) control transfer verification and 4) memory access verification. Apart from verifier, Occlum also offers
Library OS that takes an important role in to create and manage the SIPs, to provide syscall interface, memory management,
and process management. The strong and flexible architecture of Occlum allows Occlum to tackle two malicious attacks such as
Code Injection Attacks and Return Oriented Programming (ROP) attacks. 

Occlum prototype is implemented over 20,000 lines of source code in total (15,000 lines of code in Rust for LibOS, 3,000
lines of code in C++ for toolchain, and 2000 lines of code in Python for the verifier). Experimental results show that Occlum
outperforms the state-of-the-art multitasking SGX LibOS significantly by up to 6,600x on micro-benchmarks, and up to 500x
on application benchmarks.