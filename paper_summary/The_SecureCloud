################################## SECURE END-TO-END PROCESSING OF SMART METERING DATA ##################################

The SecureCloud project aims to enable confidentiality and integrity of data and applications running in potentially 
untrusted cloud environments by leveraging technologies such as Intel SGX, OpenStack and Kubernetes to provide a cloud
platform that supports secure applications. The SecureCloud is adopted by smart metering applications to process two 
important use cases: Data validation and fraud detection. Data validation is used to compute a billing report, applying
not only the billing logic, but also considering the completeness of the dataset and verifying the integrity of individual
measurements. Fraud detection estimates the likelihood of an individual consumer to be involved in frauds. 

The SecureCloud's architecture consists of SecureCloud runtime, infrastructure services, and platform services. SecureCloud
runtime can be Intel SGX which microservices in the SecureCloud platform can be developed by directly using Intel SDK or 
using the SCONE runtime. The Data Validation is written in C and compiled with SCONE, while the Fraud detection has been
developed in Python and runs on top of a Python interpreter compiled with SCONE. The lower level services in the SecureCloud
ecosystem are named SecureCloud Infrastructure Services. Example of infrastructure services are scheduling and orchestration,
attestation, auditing and monitoring. Two platforms, OpenStack and Kubernetes are the cornerstones of the SecureCloud
services. The higher level services are named SecureCloud platform services. The SecureCloud platform services offer different
types of storage services, such a secure key-value and object store, and an SQL adapter on top of it.

The SecureCloud introduces Asperathos framework to provide tools to facilitate the deployment and control of applications
running in cloud environments. In overall, two applications have been used to illustrate the need for some of the infrastructure
and platform services, for example: the need for bootstrapping application requires trust management and distribution of
secrets, achieved through the Configuration and Attestation Service (CAS); the need for support for both legacy SQL queries
and blob accesses for big data processing jobs, achieved through CascaDB and Secure Key Value Store (KVS), and the need
for orchestrating applications using popular tools, but still enabling the efficient usage of the currently very limited
enclave memory, achieved using OpenStack, Kubernetes and Asperathos.