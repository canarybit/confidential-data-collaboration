From 624b51ee4ba1b88aad6340fddf9b89e1c6c1a196 Mon Sep 17 00:00:00 2001
From: Liang Yang <liang3.yang@intel.com>
Date: Fri, 19 Feb 2021 19:46:31 +0800
Subject: [PATCH] wolfssl-sgx patch

---
 IDE/LINUX-SGX/sgx_t_static.mk  |   3 +-
 configure.ac                   |   2 +-
 m4/ax_vcs_checkout.m4          |   1 -
 pre-commit.sh                  |   6 +-
 wolfcrypt/src/asn.c            | 223 ++++++++++++++++++++++++++++++++-
 wolfssl/internal.h             |   2 +-
 wolfssl/wolfcrypt/asn_public.h |  18 +++
 wolfssl/wolfcrypt/settings.h   |   2 +
 8 files changed, 248 insertions(+), 9 deletions(-)

diff --git a/IDE/LINUX-SGX/sgx_t_static.mk b/IDE/LINUX-SGX/sgx_t_static.mk
index 41ff666f2..1767078e2 100644
--- a/IDE/LINUX-SGX/sgx_t_static.mk
+++ b/IDE/LINUX-SGX/sgx_t_static.mk
@@ -1,6 +1,7 @@
 ######## Intel(R) SGX SDK Settings ########
 SGX_SDK ?= /opt/intel/sgxsdk
 SGX_MODE ?= SIM
+SGX_DEBUG ?= 1
 SGX_ARCH ?= x64
 WOLFSSL_ROOT ?= $(shell readlink -f ../..)
 
@@ -29,7 +30,7 @@ endif
 endif
 
 ifeq ($(SGX_DEBUG), 1)
-        SGX_COMMON_CFLAGS += -O0 -g
+        SGX_COMMON_CFLAGS += -O0 -g -ggdb
 else
         SGX_COMMON_CFLAGS += -O2
 endif
diff --git a/configure.ac b/configure.ac
index 8ab179faf..b501b7877 100644
--- a/configure.ac
+++ b/configure.ac
@@ -116,7 +116,7 @@ LT_LIB_M
 OPTIMIZE_CFLAGS="-Os"
 OPTIMIZE_FAST_CFLAGS="-O2"
 OPTIMIZE_HUGE_CFLAGS="-funroll-loops -DTFM_SMALL_SET -DTFM_HUGE_SET"
-DEBUG_CFLAGS="-g -DDEBUG -DDEBUG_WOLFSSL"
+DEBUG_CFLAGS="-g -ggdb -DDEBUG -DDEBUG_WOLFSSL"
 LIB_ADD=
 LIB_STATIC_ADD=
 
diff --git a/m4/ax_vcs_checkout.m4 b/m4/ax_vcs_checkout.m4
index 4636b58ed..58c1af256 100644
--- a/m4/ax_vcs_checkout.m4
+++ b/m4/ax_vcs_checkout.m4
@@ -57,7 +57,6 @@ AC_DEFUN([AX_VCS_SYSTEM],
       AS_IF([test -d ".bzr"],[ac_cv_vcs_system="bazaar"])
       AS_IF([test -d ".svn"],[ac_cv_vcs_system="svn"])
       AS_IF([test -d ".hg"],[ac_cv_vcs_system="mercurial"])
-      AS_IF([test -e ".git"],[ac_cv_vcs_system="git"])
       ])
     AC_DEFINE_UNQUOTED([VCS_SYSTEM],["$ac_cv_vcs_system"],[VCS system])
     ])
diff --git a/pre-commit.sh b/pre-commit.sh
index 9c76f4b30..992ecfe2a 100755
--- a/pre-commit.sh
+++ b/pre-commit.sh
@@ -3,10 +3,12 @@
 #
 # Our "pre-commit" hook.
 
+exit 0
+
 # save current config
 echo "\n\nSaving current config\n\n"
 cp config.status tmp.status
-cp wolfssl/options.h tmp.options.h 
+cp wolfssl/options.h tmp.options.h
 
 # stash modified files, if any, that are not part of this commit, don't test
 # them
@@ -35,7 +37,7 @@ echo "\nRestoring current config\n"
 mv tmp.status config.status
 # don't show output in case error from above
 ./config.status >/dev/null 2>&1
-mv tmp.options.h wolfssl/options.h 
+mv tmp.options.h wolfssl/options.h
 make clean >/dev/null 2>&1
 make -j 8 >/dev/null 2>&1
 
diff --git a/wolfcrypt/src/asn.c b/wolfcrypt/src/asn.c
index 12ada17af..b44a9369c 100644
--- a/wolfcrypt/src/asn.c
+++ b/wolfcrypt/src/asn.c
@@ -18,7 +18,7 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  */
-
+#include <assert.h>
 /*
 
 DESCRIPTION
@@ -76,6 +76,7 @@ ASN Options:
 #include <wolfssl/wolfcrypt/rc2.h>
 #include <wolfssl/wolfcrypt/wc_encrypt.h>
 #include <wolfssl/wolfcrypt/logging.h>
+#include <wolfssl/wolfcrypt/wc_port.h>
 
 #include <wolfssl/wolfcrypt/random.h>
 #include <wolfssl/wolfcrypt/hash.h>
@@ -167,6 +168,21 @@ int tsip_tls_CertVerify(const byte *cert, word32 certSz,
                         word32 key_e_start, word32 key_e_len,
                         byte *tsip_encRsaKeyIdx);
 #endif
+
+#if defined(LA_REPORT) && defined(WOLFSSL_SGX)
+time_t XTIME(time_t* tloc) {
+    time_t x = 1512498557; /* Dec 5, 2017, 10:29 PDT */
+    if (tloc) *tloc = x;
+    return x;
+}
+
+time_t mktime(struct tm* tm) {
+    (void) tm;
+    assert(0);
+    return (time_t) 0;
+}
+#endif
+
 int GetLength(const byte* input, word32* inOutIdx, int* len,
                            word32 maxIdx)
 {
@@ -11448,7 +11464,10 @@ int wc_PemPubKeyToDer(const char* fileName,
 /* USER RSA ifdef portions used instead of refactor in consideration for
    possible fips build */
 /* Write a public RSA key to output */
-static int SetRsaPublicKey(byte* output, RsaKey* key,
+#if !defined(WOLFSSL_SGX_ATTESTATION)
+static
+#endif
+int SetRsaPublicKey(byte* output, RsaKey* key,
                            int outLen, int with_header)
 {
 #ifdef WOLFSSL_SMALL_STACK
@@ -11851,6 +11870,14 @@ typedef struct DerCert {
     byte extKeyUsage[MAX_EXTKEYUSAGE_SZ]; /* Extended Key Usage extension */
     byte certPolicies[MAX_CERTPOL_NB*MAX_CERTPOL_SZ]; /* Certificate Policies */
 #endif
+#ifdef WOLFSSL_SGX_ATTESTATION
+    byte    iasSigCACert[2048];
+    byte    iasSigCert[2048];
+    byte    iasSig[2048];
+    byte    iasAttestationReport[2048];
+    byte    quote[8192];
+    byte    lareport[8192];
+#endif
 #ifdef WOLFSSL_CERT_REQ
     byte attrib[MAX_ATTRIB_SZ];        /* Cert req attributes encoded */
 #endif
@@ -11873,6 +11900,14 @@ typedef struct DerCert {
     int  extKeyUsageSz;                /* encoded ExtendedKeyUsage extension length */
     int  certPoliciesSz;               /* encoded CertPolicies extension length*/
 #endif
+#ifdef WOLFSSL_SGX_ATTESTATION
+    int iasSigCACertSz;
+    int iasSigCertSz;
+    int iasSigSz;
+    int iasAttestationReportSz;
+    int quoteSz;
+    int lareportSz;
+#endif
 #ifdef WOLFSSL_ALT_NAMES
     int  altNamesSz;                   /* encoded AltNames extension length */
 #endif
@@ -12736,7 +12771,16 @@ static int SetKeyUsage(byte* output, word32 outSz, word16 input)
                        ku, idx);
 }
 
-static int SetOjectIdValue(byte* output, word32 outSz, int* idx,
+#if !defined(WOLFSSL_SGX_ATTESTATION)
+static
+#endif
+int SetOjectIdValue(byte* output, word32 outSz, int* idx,
+                    const byte* oid, word32 oidSz);
+
+#if !defined(WOLFSSL_SGX_ATTESTATION)
+static
+#endif
+int SetOjectIdValue(byte* output, word32 outSz, int* idx,
     const byte* oid, word32 oidSz)
 {
     /* verify room */
@@ -12750,6 +12794,53 @@ static int SetOjectIdValue(byte* output, word32 outSz, int* idx,
     return 0;
 }
 
+#ifdef WOLFSSL_SGX_ATTESTATION
+static int SetSGXExt(byte* output, word32 outSz, const byte* oid, int oidSz, const byte *input, word32 length)
+{
+    byte ext_len[1 + MAX_LENGTH_SZ];
+    byte ext_enc_len[MAX_LENGTH_SZ];
+    byte oid_enc[16];
+    int idx = 0, ext_lenSz;
+    int oid_enc_lenSz = 0;
+
+    if (output == NULL || input == NULL || oid == NULL)
+        return BAD_FUNC_ARG;
+
+    ext_lenSz = SetOctetString(length, ext_len);
+
+    SetLength(length + ext_lenSz, ext_enc_len);
+
+    SetOjectIdValue(oid_enc, sizeof(oid_enc), &oid_enc_lenSz, oid, oidSz);
+
+    if (outSz < 3)
+        return BUFFER_E;
+
+    idx = SetSequence(length + oid_enc_lenSz + ext_lenSz,
+                      output);
+
+    if ((idx + length + oid_enc_lenSz + ext_lenSz) > outSz)
+        return BUFFER_E;
+
+    /* put oid */
+    XMEMCPY(output+idx, oid_enc, oid_enc_lenSz);
+    idx += oid_enc_lenSz;
+
+    /* put encoded len */
+    /* XMEMCPY(output+idx, ext_enc_len, ext_enc_lenSz); */
+    /* idx += ext_enc_lenSz; */
+
+    /* put octet header */
+    XMEMCPY(output+idx, ext_len, ext_lenSz);
+    idx += ext_lenSz;
+
+    /* put value */
+    XMEMCPY(output+idx, input, length);
+    idx += length;
+
+    return idx;
+}
+#endif
+
 /* encode Extended Key Usage (RFC 5280 4.2.1.12), return total bytes written */
 static int SetExtKeyUsage(Cert* cert, byte* output, word32 outSz, byte input)
 {
@@ -13431,6 +13522,17 @@ static int SetValidity(byte* output, int daysValid)
     localTime.tm_year += 1900;
     localTime.tm_mon +=    1;
 
+#ifdef WOLFSSL_SGX_ATTESTATION
+    /* To work around the abscence of a trusted time source in SGX, we
+       hard-code the certificate validity period. */
+    bzero(&localTime, sizeof(localTime));
+    localTime.tm_year = 2020;
+    localTime.tm_mday = 14;
+    localTime.tm_wday = 6;          /* 6 is Friday */
+    localTime.tm_mon  = 1;          /* 1 is February */
+    localTime.tm_hour = 9;
+#endif
+
     SetTime(&localTime, before + beforeSz);
     beforeSz += ASN_GEN_TIME_SZ;
 
@@ -13450,6 +13552,15 @@ static int SetValidity(byte* output, int daysValid)
     localTime.tm_year += 1900;
     localTime.tm_mon  +=    1;
 
+#ifdef WOLFSSL_SGX_ATTESTATION
+    bzero(&localTime, sizeof(localTime));
+    localTime.tm_year = 2030;
+    localTime.tm_mday = 14;
+    localTime.tm_wday = 5;          /* 5 is Thursday */
+    localTime.tm_mon  = 1;          /* 1 is February */
+    localTime.tm_hour = 9;
+#endif
+
     SetTime(&localTime, after + afterSz);
     afterSz += ASN_GEN_TIME_SZ;
 
@@ -13751,6 +13862,65 @@ static int EncodeCert(Cert* cert, DerCert* der, RsaKey* rsaKey, ecc_key* eccKey,
     else
         der->certPoliciesSz = 0;
 #endif /* WOLFSSL_CERT_EXT */
+#ifdef WOLFSSL_SGX_ATTESTATION
+// 1.2.840.113741.1337.*
+#define OID(N) {0x2A, 0x86, 0x48, 0x86, 0xF8, 0x4D, 0x8A, 0x39, (N)}
+    if (cert->iasSigCACertSz > 0 &&
+        cert->iasSigCertSz > 0 &&
+        cert->iasSigSz > 0 &&
+        cert->iasAttestationReportSz > 0) {
+
+
+        unsigned char iasAttestationReportOid[] = OID(0x02);
+        unsigned char iasSigCACertOid[] = OID(0x03);
+        unsigned char iasSigCertOid[] = OID(0x04);
+        unsigned char iasSigOid[] = OID(0x05);
+
+        der->iasSigCACertSz = SetSGXExt(der->iasSigCACert, sizeof(der->iasSigCACert),
+                                        iasSigCACertOid, sizeof(iasSigCACertOid),
+                                        cert->iasSigCACert, cert->iasSigCACertSz);
+
+        der->iasSigCertSz = SetSGXExt(der->iasSigCert, sizeof(der->iasSigCert),
+                                      iasSigCertOid, sizeof(iasSigCertOid),
+                                      cert->iasSigCert, cert->iasSigCertSz);
+
+        der->iasSigSz = SetSGXExt(der->iasSig, sizeof(der->iasSig),
+                                  iasSigOid, sizeof(iasSigOid),
+                                  cert->iasSig, cert->iasSigSz);
+
+        der->iasAttestationReportSz = SetSGXExt(der->iasAttestationReport,
+                                                sizeof(der->iasAttestationReport),
+                                                iasAttestationReportOid,
+                                                sizeof(iasAttestationReportOid),
+                                                cert->iasAttestationReport,
+                                                cert->iasAttestationReportSz);
+
+        der->extensionsSz += der->iasAttestationReportSz +
+            der->iasSigCACertSz +
+            der->iasSigCertSz +
+            der->iasSigSz;
+    }
+
+    if (cert->quoteSz > 0) {
+        const unsigned char quoteOid[] = OID(0x06);
+        der->quoteSz = SetSGXExt(der->quote, sizeof(der->quote),
+                                 quoteOid, sizeof(quoteOid),
+                                 cert->quote, cert->quoteSz);
+        assert(der->quoteSz > 0);
+
+        der->extensionsSz += der->quoteSz;
+    }
+
+    if (cert->lareportSz > 0) {
+	const unsigned char lareportOid[] = OID(0x0e);
+	der->lareportSz = SetSGXExt(der->lareport, sizeof(der->lareport),
+				    lareportOid, sizeof(lareportOid),
+				    cert->lareport, cert->lareportSz);
+	assert(der->lareportSz > 0);
+
+	der->extensionsSz += der->lareportSz;
+    }
+#endif
 
     /* put extensions */
     if (der->extensionsSz > 0) {
@@ -13828,6 +13998,53 @@ static int EncodeCert(Cert* cert, DerCert* der, RsaKey* rsaKey, ecc_key* eccKey,
                 return EXTENSIONS_E;
         }
 #endif /* WOLFSSL_CERT_EXT */
+#ifdef WOLFSSL_SGX_ATTESTATION
+        if (der->iasSigCACertSz && der->iasSigCertSz &&
+            der->iasSigSz && der->iasAttestationReportSz) {
+
+            ret = SetExtensions(der->extensions, sizeof(der->extensions),
+                                &der->extensionsSz,
+                                der->iasAttestationReport, der->iasAttestationReportSz);
+            if (ret <= 0)
+                return EXTENSIONS_E;
+
+            ret = SetExtensions(der->extensions, sizeof(der->extensions),
+                                &der->extensionsSz,
+                                der->iasSigCACert, der->iasSigCACertSz);
+            if (ret <= 0)
+                return EXTENSIONS_E;
+
+            ret = SetExtensions(der->extensions, sizeof(der->extensions),
+                                &der->extensionsSz,
+                                der->iasSigCert, der->iasSigCertSz);
+            if (ret <= 0)
+                return EXTENSIONS_E;
+
+            ret = SetExtensions(der->extensions, sizeof(der->extensions),
+                                &der->extensionsSz,
+                                der->iasSig, der->iasSigSz);
+            if (ret <= 0)
+                return EXTENSIONS_E;
+        }
+
+	if (der->quoteSz > 0) {
+
+		ret = SetExtensions(der->extensions, sizeof(der->extensions),
+				&der->extensionsSz,
+				der->quote, der->quoteSz);
+		if (ret <= 0)
+			return EXTENSIONS_E;
+
+	}
+
+	if (der->lareportSz > 0) {
+		ret = SetExtensions(der->extensions, sizeof(der->extensions),
+				&der->extensionsSz,
+				der->lareport, der->lareportSz);
+		if (ret <= 0)
+			return EXTENSIONS_E;
+	}
+#endif
     }
 
     der->total = der->versionSz + der->serialSz + der->sigAlgoSz +
diff --git a/wolfssl/internal.h b/wolfssl/internal.h
index 73581fe90..03c7aaae1 100644
--- a/wolfssl/internal.h
+++ b/wolfssl/internal.h
@@ -1574,7 +1574,7 @@ enum Misc {
 
 /* max size of a handshake message, currently set to the certificate */
 #ifndef MAX_HANDSHAKE_SZ
-    #define MAX_HANDSHAKE_SZ MAX_CERTIFICATE_SZ
+    #define MAX_HANDSHAKE_SZ ((MAX_CERTIFICATE_SZ) * 4)
 #endif
 
 #ifndef SESSION_TICKET_LEN
diff --git a/wolfssl/wolfcrypt/asn_public.h b/wolfssl/wolfcrypt/asn_public.h
index 480b64f64..e67661416 100644
--- a/wolfssl/wolfcrypt/asn_public.h
+++ b/wolfssl/wolfcrypt/asn_public.h
@@ -332,6 +332,20 @@ typedef struct Cert {
     char    certPolicies[CTC_MAX_CERTPOL_NB][CTC_MAX_CERTPOL_SZ];
     word16  certPoliciesNb;              /* Number of Cert Policy */
 #endif
+#ifdef WOLFSSL_SGX_ATTESTATION
+    byte    iasSigCACert[2048];
+    int     iasSigCACertSz;
+    byte    iasSigCert[2048];
+    int     iasSigCertSz;
+    byte    iasSig[2048];
+    int     iasSigSz;
+    byte    iasAttestationReport[2048];
+    int     iasAttestationReportSz;
+    byte    quote[8192];
+    int     quoteSz;
+    byte    lareport[8192];
+    int     lareportSz;
+#endif
 #if defined(WOLFSSL_CERT_EXT) || defined(OPENSSL_EXTRA)
     byte     issRaw[sizeof(CertName)];   /* raw issuer info */
     byte     sbjRaw[sizeof(CertName)];   /* raw subject info */
@@ -583,6 +597,10 @@ WOLFSSL_API int wc_CreatePKCS8Key(byte* out, word32* outSz,
 WOLFSSL_API int wc_GetTime(void* timePtr, word32 timeSize);
 #endif
 
+#ifdef WOLFSSL_SGX_ATTESTATION
+WOLFSSL_API int SetRsaPublicKey(byte* output, RsaKey* key, int outLen, int with_header);
+#endif
+
 #ifdef WOLFSSL_ENCRYPTED_KEYS
     WOLFSSL_API int wc_EncryptedInfoGet(EncryptedInfo* info,
         const char* cipherInfo);
diff --git a/wolfssl/wolfcrypt/settings.h b/wolfssl/wolfcrypt/settings.h
index 7e6fa8b06..1893b8c1f 100644
--- a/wolfssl/wolfcrypt/settings.h
+++ b/wolfssl/wolfcrypt/settings.h
@@ -1717,7 +1717,9 @@ extern void uITRON4_free(void *p) ;
     #define ECC_TIMING_RESISTANT
     #define TFM_TIMING_RESISTANT
     #define SINGLE_THREADED
+#if !defined(WOLFSSL_SGX_ATTESTATION)
     #define NO_ASN_TIME /* can not use headers such as windows.h */
+#endif
     #define HAVE_AESGCM
     #define USE_CERT_BUFFERS_2048
     #define USE_FAST_MATH
-- 
2.17.1

